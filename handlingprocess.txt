//File name: basicfork.c

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
   fork();
   printf("Called fork() system call\n");
   return 0;
}





//FORKEXAMPLE
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
void forkexample()
{
	// child process because return value zero
	if (fork() == 0)
		printf("Hello from Child!\n");

	// parent process because return value non-zero.
	else
		printf("Hello from Parent!\n");
}
int main()
{
	forkexample();
	return 0;
}








// program to demonstrate creating processes using fork()
#include <unistd.h>
#include <stdio.h>
int main()
{
	// Creating first child
	int n1 = fork();

	// Creating second child. First child
	// also executes this line and creates
	// grandchild.
	int n2 = fork();
	if (n1 > 0 && n2 > 0) {
		printf("parent\n");
		printf("%d %d \n", n1, n2);
		printf(" my id is %d \n", getpid());
	}
	else if (n1 == 0 && n2 > 0)
	{
		printf("First child\n");
		printf("%d %d \n", n1, n2);
		printf("my id is %d \n", getpid());
	}
      else if (n1 > 0 && n2 == 0)
	{
		printf("Second child\n");
		printf("%d %d \n", n1, n2);
		printf("my id is %d \n", getpid());
	}
	else {
		printf("third child\n");
		printf("%d %d \n", n1, n2);
		printf(" my id is %d \n", getpid());
	}
	return 0;
}








//EXAMPLE 
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main() {
   pid_t pid, mypid, myppid;
   pid = getpid();
   printf("Before fork: Process id is %d\n", pid);
   pid = fork();
   if (pid < 0) {
      perror("fork() failure\n");      return 1;
   }
   // Child process
   if (pid == 0) {
      printf("This is child process\n");
      mypid = getpid();      myppid = getppid();
      printf("Process id is %d and PPID is %d\n", mypid, myppid);
   } else { // Parent process 
      sleep(2);
      printf("This is parent process\n");      mypid = getpid();      myppid = getppid();
      printf("Process id is %d and PPID is %d\n", mypid, myppid);
      printf("Newly created process id or child pid is %d\n", pid);
   }   return 0; 
}







//EXAMPLE WITH FORK, WAIT, EXIT SYSTEM CALL
#include<stdio.h> // printf()
#include<stdlib.h> // exit()
#include<sys/types.h> // pid_t
#include<sys/wait.h> // wait()
#include<unistd.h> // fork

int main(int argc, char **argv)
{

pid_t pid;
pid = fork();

if(pid==0)

{
printf("It is the child process and pid is %d\n",getpid());

int i=0;
for(i=0;i<8;i++)
{
printf("%d\n",i);
}
exit(0);
}
else if(pid > 0)
{
printf("It is the parent process and pid is %d\n",getpid());
int status;
wait(&status);
printf("Child is reaped\n");
}
else
{
printf("Error in forking..\n");
exit(EXIT_FAILURE);
}
return 0;
}







EXAMPLE
#include <stdio.h>

/* This program forks and and the prints whether the process is
 *   - the child (the return value of fork() is 0), or
 *   - the parent (the return value of fork() is not zero)
 *
 * When this was run 100 times on the computer the author is
 * on, only twice did the parent process execute before the
 * child process executed.
 *
 * Note, if you juxtapose two strings, the compiler automatically
 * concatenates the two, e.g., "Hello " "world!"
 */

int main( void ) {
	char *argv[3] = {"Command-line", ".", NULL};

	int pid = fork();
if ( pid == 0 ) {
		execvp( "find", argv );
	}

	/* Put the parent to sleep for 2 seconds--let the child finished executing */
	wait( 2 );

	printf( "Finished executing the parent process\n"
	        " - the child won't get here--you will only see this once\n" );

	return 0;
}



